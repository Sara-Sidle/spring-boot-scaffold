######################################  测试数据库  ##############################################
##多数据源配置
## ryxzf 数据源配置
ryxzf.datasource.url=
ryxzf.datasource.username=ryxzf
ryxzf.datasource.password=aaa111
ryxzf.datasource.driverClassName=oracle.jdbc.OracleDriver
# ryxfr 数据源配置  用于ryxfr
ryxfr.datasource.url=
ryxfr.datasource.username=ryxfr
ryxfr.datasource.password=aaa111
ryxfr.datasource.driverClassName=oracle.jdbc.OracleDriver
## ryxfx 数据源配置
ryxfx.datasource.url=jdbc:oracle:thin:ryxfr/111@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=12.3.10.15)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=12.3.10.15)(PORT=1521))(LOAD_BALANCE=on)(FAILOVER=ON))(CONNECT_DATA=(SERVICE_NAME=frdb)))
ryxfx.datasource.username=ryxfx
ryxfx.datasource.password=aaa111
ryxfx.datasource.driverClassName=oracle.jdbc.OracleDriver
## ryxpay 数据源配置
ryxpay.datasource.url=jdbc:oracle:thin:ryxfr/111@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=12.3.10.15)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=12.3.10.15)(PORT=1521))(LOAD_BALANCE=on)(FAILOVER=ON))(CONNECT_DATA=(SERVICE_NAME=frdb)))
ryxpay.datasource.username=ryxpay
ryxpay.datasource.password=aaa111
ryxpay.datasource.driverClassName=oracle.jdbc.OracleDriver
#
#
#
#DUBBO测试服务器地址
spring.dubbo.registry.address=zookeeper://12.3.10.160:2181
spring.dubbo.protocol.name=dubbo
spring.dubbo.protocol.port=20880
spring.dubbo.scan=com.ryx.dubbo.service
#
#
## Redis 配置
## Redis 配置
## Redis数据库索引（默认为0）
spring.redis.database=0
## Redis服务器地址
spring.redis.host=12.3.10.160
## Redis服务器连接端口
spring.redis.port=6379
## Redis服务器连接密码（默认为空）
spring.redis.password=
## 连接池最大连接数（使用负值表示没有限制）
#
#springboot-admin监控配置
#用于显示在admin服务端页面的名字98
spring.boot.admin.client.instance.name=api-service[dev]
spring.boot.admin.client.url=http://12.3.10.160:8088
spring.boot.admin.client.instance.prefer-ip=true
management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.sessions.enabled=true
management.endpoints.enabled-by-default=true
management.endpoint.health.show-details=ALWAYS
spring.application.name=api-service[dev]
#
#如果server端需要进行认证时，该属性用于配置用户名。
spring.boot.admin.client.username=pass
#
#如果server端需要进行认证时，该属性用于配置密码。
spring.boot.admin.client.password=pass
spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}
spring.security.user.name=api-service
spring.security.user.password=pass123
#
#tomcat 配置
server.port=8081
#属性可以根据运行环境自动读取不同的配置文件。例如将该属性定义为 dev 的话，Spring Boot 会额外从 application-dev.yml 文件中读取该环境的配置
#spring.profiles.active
#
#
#
#数据库存储过程日志报错查询放的短信的手机号
sms.error.mobile=18678876092



